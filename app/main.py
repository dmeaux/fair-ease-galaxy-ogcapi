# generated by fastapi-codegen:
#   filename:  processSummary.yaml
#   timestamp: 2025-03-19T13:27:28+00:00

from __future__ import annotations

import logging
from pathlib import Path
import tomllib
from typing import Any, NamedTuple

from fastapi import FastAPI
import httpx

from model.ogc_api_processes import (
    Process,
    ProcessSummary,
    InputDescription,
    OutputDescription,
    DescriptionType,
    SchemaModel,
    ValuePassingType,
)


logger = logging.getLogger(__name__)

CREDENTIALS_FILEPATH = "credentials.toml"


class ToolInfo(NamedTuple):
    id_long_form: str
    owner: str
    tool_shed: str
    tool_shed_repo_name: str
    id: str
    version: str
    name: str
    description: str


def _parse_tool_id(tool_id_long_form: str) -> ToolInfo:
    parts = tool_id_long_form.split("/")
    return ToolInfo(
        id_long_form=tool_id_long_form,
        tool_shed=parts[0],
        owner=parts[2],
        tool_shed_repo_name=parts[3],
        id=parts[4],
        version=parts[5],
        name="",
        description="",
    )


def _read_credentials_file(credentials_path: Path) -> dict[str, Any]:
    try:
        with open(credentials_path, "rb") as f:
            return tomllib.load(f)
    except IOError:
        logger.error("An IO Error occurred reading: %s.", credentials_path)
        return {"copernicus": {"client_id": None, "client_secret": None}}


creds = _read_credentials_file(CREDENTIALS_FILEPATH)
GALAXY_URL = creds["galaxy"]["GALAXY_URL"]
GALAXY_ACCESS_KEY = creds["galaxy"]["GALAXY_ACCESS_KEY"]

app = FastAPI()


def fetch_workflows(galaxy_url: str, galaxy_access_key: str) -> list[dict[str, Any]]:
    return httpx.get(galaxy_url + "/api/workflows/?key=" + galaxy_access_key).json()


def fetch_workflow_by_id(galaxy_url: str, galaxy_access_key: str, workflow_id: str):
    return httpx.get(f"{galaxy_url}/api/workflows/{workflow_id}?key={galaxy_access_key}").json()


def fetch_tool_by_id(galaxy_url: str, galaxy_access_key: str, tool_id: str):
    return httpx.get(f"{galaxy_url}/api/tools/{tool_id}?key={galaxy_access_key}").json()


def fetch_tool_by_tool_info(galaxy_url: str, galaxy_access_key: str, tool_info: ToolInfo):
    return httpx.get(f"{galaxy_url}/api/tools/{tool_info.id}?key={galaxy_access_key}").json()


def fetch_tool_io_details(galaxy_url: str, galaxy_access_key: str, tool_id: str):
    url = f"{galaxy_url}/api/tools/{tool_id}?key={galaxy_access_key}&io_details=True"
    return httpx.get(url).json()


def _parse_tool_iodetail_input(tool_name: str, io_detail_input: dict[str, Any]) -> InputDescription:
    return InputDescription(
        descriptionType=DescriptionType(
            title=f"{tool_name}-{io_detail_input["name"]}",
            description=io_detail_input[" label"],
            keywords=None,
            metadata=None,
            ),
        # schema=SchemaModel(
        #     title=None,
        #     multipleOf=None,
        #     maximum=None,
        #     exclusiveMaximum=None,
        #     minimum=None,
        #     exclusiveMinimum=None,
        #     maxLength=None,
        #     minLength=0,
        #     pattern=None,
        #     maxItems=None,
        #     minItems=0,
        #     uniqueItems=None,
        #     maxProperties=None,
        #     minProperties=0,
        #     required={None, },
        #     enum=[None],
        #     items=None,
        #     properties=None,
        #     additionalProperties=None,
        #     description=None,
        #     format=None,
        #     default=None,
        #     nullable=None,
        #     readOnly=None,
        #     writeOnly=None,
        #     example=None,
        #     deprecated=None,
        #     contentMediaType=None,
        #     contentEncoding=None,
        #     contentSchema=None,
        #     ),
        dataClasses=None,
        minOccurs=1,
        maxOccurs=None,
        valuePassing=(
            str(ValuePassingType.BY_VALUE),
            )
        )


def get_tool_inputs_from_iodetails(io_details):
    return [_parse_tool_iodetail_input(io_details["name"], x)
            for x in io_details["inputs"]]


def get_tool_io_details(tool_id_long_form: str):
    tool_info = _parse_tool_id(tool_id_long_form)
    return fetch_tool_io_details(GALAXY_URL,
                                 GALAXY_ACCESS_KEY,
                                 tool_id=tool_info.id,
                                 )


def get_tool_ids_from_steps(steps: dict[str, Any]) -> list[str]:
    return [v["tool_id"] for _, v in steps.items()]


# @app.get("/tools/{tool_id}")
# def get_tool(tool_id: str) -> Any:
#     return fetch_tool_by_id(GALAXY_URL, GALAXY_ACCESS_KEY, tool_id)


@app.get("/processes/{process_id}", response_model=Process)
def get_process(process_id: str) -> Any:
    workflow = fetch_workflow_by_id(GALAXY_URL,
                                    GALAXY_ACCESS_KEY,
                                    process_id,
                                    )

    process_description_type = DescriptionType(
        title=workflow["name"],
        description=workflow["annotation"],
        keywords=workflow["tags"],
        metadata=None,
    )

    process_summary = ProcessSummary(
        descriptionType=process_description_type,
        id=process_id,
        version=str(workflow["version"]),
        jobControlOptions=None,
        links=None,
    )

    # TODO: debug pydantic validation for input models
    # inputs = get_tool_ids_from_steps(workflow["steps"])
    inputs = [
        InputDescription(
            descriptionType=DescriptionType(
                title=None,
                description=None,
                keywords=None,
                metadata=None,
                ),
            # schema=SchemaModel(
            #     title=None,
            #     multipleOf=None,
            #     maximum=None,
            #     exclusiveMaximum=None,
            #     minimum=None,
            #     exclusiveMinimum=None,
            #     maxLength=None,
            #     minLength=0,
            #     pattern=None,
            #     maxItems=None,
            #     minItems=0,
            #     uniqueItems=None,
            #     maxProperties=None,
            #     minProperties=0,
            #     required={None, },
            #     enum=[None],
            #     items=None,
            #     properties=None,
            #     additionalProperties=None,
            #     description=None,
            #     format=None,
            #     default=None,
            #     nullable=None,
            #     readOnly=None,
            #     writeOnly=None,
            #     example=None,
            #     deprecated=None,
            #     contentMediaType=None,
            #     contentEncoding=None,
            #     contentSchema=None,
            #     ),
            dataClasses=None,
            minOccurs=1,
            maxOccurs=None,
            valuePassing=(
                str(ValuePassingType.BY_VALUE),
                )
            )
        ]

    # TODO: map outputs in galaxy to this
    outputs = [
        OutputDescription(
            descriptionType=DescriptionType(
                title=None,
                description=None,
                keywords=None,
                metadata=None,
            ),
            # schema=SchemaModel(
            #     title=None,
            #     multipleOf=None,
            #     maximum=None,
            #     exclusiveMaximum=None,
            #     minimum=None,
            #     exclusiveMinimum=None,
            #     maxLength=None,
            #     minLength=0,
            #     pattern=None,
            #     maxItems=None,
            #     minItems=0,
            #     uniqueItems=None,
            #     maxProperties=None,
            #     minProperties=0,
            #     required={None,},
            #     enum=[None],
            #     items=None,
            #     properties=None,
            #     additionalProperties=None,
            #     description=None,
            #     format=None,
            #     default=None,
            #     nullable=None,
            #     readOnly=None,
            #     writeOnly=None,
            #     example=None,
            #     deprecated=None,
            #     contentMediaType=None,
            #     contentEncoding=None,
            #     contentSchema=None,
            # ),
            )
    ]
    process = Process(
        processSummary=process_summary,
        inputs=inputs,
        outputs=outputs,
    )

    return process
